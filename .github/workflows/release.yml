name: Release Update

on:
  release:
    types: [created]

jobs:
  update-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@main
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "gradle"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@main

      - name: Cache Gradle packages
        uses: actions/cache@main
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build

      - name: Read version
        id: version
        run: |
          VERSION=$(grep "plugin-version=" version.txt | cut -d'=' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get commit history
        id: commits
        run: |
          # 获取上一个标签
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "initial")
          # 获取从上一个标签到现在的所有提交信息
          COMMITS=$(git log $PREV_TAG..HEAD --pretty=format:"- %s" --reverse)
          # 将提交信息写入临时文件
          echo "$COMMITS" > commit_history.txt
          # 读取文件内容并设置输出
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          cat commit_history.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get latest release info
        id: release_info
        run: |
          # 使用 curl 调用 GitHub API 获取最新发布信息
          LATEST_RELEASE=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" || echo "{}")

          # 提取发布标签
          LATEST_TAG=$(echo "$LATEST_RELEASE" | grep -o '"tag_name": "[^"]*' | cut -d'"' -f4 || echo "")

          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "release_info<<EOF" >> $GITHUB_OUTPUT
          echo "$LATEST_RELEASE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Prepare release body
        id: release_body
        run: |
          BUILD_TIME=$(date +'%Y-%m-%d %H:%M:%S')
          COMMIT_HASH=$(git rev-parse --short HEAD)

          # 读取提交历史
          COMMIT_HISTORY=$(cat commit_history.txt)

          {
            echo "body<<EOF"
            echo "## StatCore v${{ steps.version.outputs.version }}"
            echo ""
            echo "### 更新内容"
            echo "$COMMIT_HISTORY"
            echo ""
            echo "### 构建信息"
            echo "- 版本: ${{ steps.version.outputs.version }}"
            echo "- 构建时间: $BUILD_TIME"
            echo "- 提交哈希: $COMMIT_HASH"
            echo "- 上一个版本: ${{ steps.release_info.outputs.latest_tag }}"
            echo ""
            echo "### 下载"
            echo "请从发布页面下载最新的插件文件。"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Update release
        uses: softprops/action-gh-release@master
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: "StatCore v${{ steps.version.outputs.version }}"
          body: ${{ steps.release_body.outputs.body }}
          draft: false
          prerelease: false
          files: build/libs/*.jar
