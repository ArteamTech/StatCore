---
description: 
globs: 
alwaysApply: false
---
# StatCore 计算系统与数据流程

## 属性计算流程

### 基本计算公式
StatCore 采用统一的属性计算公式：
```
最终值 = (基础值 + 所有加法修改器) × (1 + 所有乘法修改值)
```

### 计算步骤
1. **收集所有修改器**：从实体的属性实例中获取所有修改器
2. **按操作类型分组**：将修改器分为加法组和乘法组
3. **按优先级排序**：在每个组内按优先级排序修改器
4. **应用加法修改器**：计算所有加法修改器的总和并添加到基础值
5. **应用乘法修改器**：计算所有乘法修改器的总和并作为乘数应用
6. **应用边界限制**：确保最终值在属性的最小值和最大值之间

### 防御计算公式
防御属性采用特殊的计算公式，将防御值转换为伤害减免百分比：
```
伤害减免率 = 防御值 / (防御值 + 100)
```

这意味着：
- 0点防御 = 0%减伤
- 50点防御 = 33.3%减伤
- 100点防御 = 50%减伤
- 200点防御 = 66.7%减伤
- 900点防御 = 90%减伤

## 数据流程

### 属性注册流程
1. **创建属性**：定义属性的基本特性（ID、默认值、最小值、最大值等）
2. **注册属性**：将属性注册到AttributeRegistry
3. **初始化**：系统初始化时加载所有注册的属性

### 属性实例创建流程
1. **实体加载**：当实体加载到世界时
2. **实例创建**：为实体创建所有已注册属性的实例
3. **默认值设置**：根据实体类型设置适当的默认值
4. **修改器应用**：应用来自装备、效果等的初始修改器

### 属性更新流程
1. **触发事件**：装备变更、效果应用等事件触发
2. **修改器更新**：添加、移除或修改属性修改器
3. **重新计算**：重新计算受影响的属性值
4. **事件发布**：发布AttributeChangeEvent
5. **同步处理**：通过ImmediateSyncManager同步到客户端

### 伤害计算流程
1. **伤害来源识别**：识别伤害类型（物理、弹射物、爆炸等）
2. **防御属性查询**：获取对应防御类型的属性值
3. **减伤计算**：应用防御计算公式计算减伤比例
4. **最终伤害**：应用减伤后得到最终伤害值

## 同步机制

### 服务器到客户端同步
1. **变更检测**：检测属性值变化
2. **数据包创建**：创建包含属性ID、实体ID和新值的数据包
3. **发送数据包**：将数据包发送给相关客户端
4. **客户端更新**：客户端接收数据包并更新本地属性值

### 客户端请求同步
1. **客户端请求**：客户端发送属性同步请求
2. **服务器响应**：服务器收集请求的属性值
3. **数据包创建**：创建包含请求属性的数据包
4. **发送数据包**：将数据包发送给请求的客户端
5. **客户端更新**：客户端更新本地属性值

## 性能优化

### 计算缓存
1. **缓存策略**：缓存计算结果，避免频繁重新计算
2. **缓存失效**：当修改器变化时使缓存失效
3. **懒计算**：仅在需要时计算属性值

### 批量更新
1. **收集更新**：收集短时间内的多个更新
2. **批量处理**：一次性处理多个更新
3. **批量同步**：一次性同步多个属性变更

## 扩展点

### 自定义属性
1. **实现接口**：实现StatAttribute接口
2. **注册属性**：通过AttributeRegistry注册
3. **提供计算逻辑**：实现calculate方法

### 自定义修改器
1. **创建修改器**：创建AttributeModifier实例
2. **设置操作类型**：指定ADDITION或MULTIPLY
3. **应用修改器**：将修改器添加到属性实例

### 事件监听
1. **注册监听器**：注册事件监听器
2. **处理事件**：实现事件处理逻辑
3. **修改属性**：根据事件修改属性值或修改器

