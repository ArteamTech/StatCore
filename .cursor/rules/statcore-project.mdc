---
description: 
globs: 
alwaysApply: true
---
# StatCore 属性重构模组开发规范

## 项目概述
StatCore 是一个基于 Minecraft 1.21.5 + NeoForge 21.5.75 的属性系统重构模组，旨在重新设计原版属性计算逻辑，提供模块化扩展支持，并为其他模组提供清晰的 API 接口。

## 核心开发原则
- **KISS**: 保持简单，避免过度设计
- **DRY**: 代码复用，但警惕过度抽象
- **YAGNI**: 仅实现当前需求
- **强制中文回复**: AI 必须使用中文进行所有交互
- **API 优先**: 编写代码前必须先搜索相关 API 用法，禁止盲目编写
- **完善 i18n**: 禁止硬编码文本，所有用户可见文本必须通过本地化文件支持

补充：由于在起步开发阶段，为了更好的实现需求并改进我们的结构框架，你可以适当修改API

## 核心架构

### API 层
- **属性接口**：定义了属性的基本结构和行为
  - `StatAttribute`：属性基本接口
  - `AttributeModifier`：属性修改器接口
  - `AttributeInstance`：属性实例接口

### 核心实现层
- **属性系统**：
  - 属性注册表：管理所有注册的属性
  - 属性实例管理：为实体创建和管理属性实例
  - 修改器系统：应用和管理属性修改器

### 属性类型
- **核心属性**：
  - 生命值属性：玩家默认100，其他生物为原版生命值的5倍
  - 防御系统：包括物理防御、弹射物防御、爆炸防御、火焰防御和真实防御

### 计算系统
- **属性计算公式**：(基础值 + 所有加法修改器) × (1 + 所有乘法修改值)
- **防御计算公式**：防御值 / (防御值 + 100)

### 事件系统
- **属性事件**：
  - 属性变更事件
  - 属性同步事件
- **装备事件**：
  - 装备变更事件处理器

### 同步系统
- **立即同步管理器**：处理属性变更的实时同步

## 文件结构

### API 包
- `api/attributes/`：属性相关API接口
- `api/events/`：事件相关API接口
- `api/registry/`：注册相关API接口

### 核心包
- `core/attributes/`：属性核心实现
- `core/registry/`：注册系统实现
- `core/events/`：事件处理系统
- `core/sync/`：同步管理系统

### 属性包
- `attributes/`：具体属性实现
  - `CoreAttributes.kt`：属性统一入口点
  - `HealthAttributes.kt`：生命值属性实现
  - `DefenseAttributes.kt`：防御属性实现

### 命令包
- `commands/`：游戏内命令实现
  - `StatCommand.kt`：属性查看命令

### 工具包
- `util/`：工具类和辅助函数

### 数据包支持
- JSON 格式的属性定义
- 支持条件应用
- 支持实体类型过滤
- 支持维度限制

## 兼容性要求

- 提供 Mixin 挂钩点
- 支持其他模组的属性扩展
- 兼容常见的装备模组
- 提供迁移工具

## 7. 性能优化

### 缓存策略
- 计算结果缓存
- 修改器列表缓存
- 事件监听器缓存

### 异步处理
- 非关键路径异步计算
- 批量更新支持
- 懒加载机制

## 8. 国际化要求

### 必须本地化的内容
- 所有属性名称
- 错误消息
- 配置描述
- JEI/EMI 集成文本

### 本地化文件格式
```json
{
  "attribute.statcore.crit_damage": "暴击伤害",
  "attribute.statcore.armor_penetration": "护甲穿透",
  "config.statcore.enable_custom_attributes": "启用自定义属性",
  "error.statcore.invalid_modifier": "无效的属性修改器"
}
```

## 9. 调试与监控

### 调试工具
- 属性查看命令 `/stat [entity]`
- 计算过程追踪
- 性能分析工具

### 日志系统
- 分级日志（ERROR, WARN, INFO, DEBUG）
- 可配置的日志输出
- 错误报告收集

## 10. 发布与维护

### 版本控制
- 语义化版本号（SemVer）
- 变更日志维护
- 兼容性矩阵

### 文档要求
- API 文档（KDoc）
- 使用指南
- 迁移指南
- 常见问题解答

## 开发流程
1. **设计阶段**: 确定 API 接口和数据结构
2. **核心开发**: 实现属性系统核心功能
3. **API 开发**: 创建公共接口和事件系统
4. **兼容性**: 实现原版和模组兼容
5. **测试验证**: 全面测试各项功能
6. **文档完善**: 编写完整的使用文档
7. **发布准备**: 打包、测试、发布

## 注意事项
- 所有代码必须包含适当的 KDoc 注释
- 关键算法需要性能测试
- 新功能必须有对应的测试用例
- 配置变更需要向后兼容
- UI 界面优先使用原版 Minecraft 纹理和样式